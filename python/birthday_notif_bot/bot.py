import os
import telebot
import sqlite3


TOKEN    = os.getenv("TOKEN")
ADMIN_ID = os.getenv("TGID")

bot = telebot.TeleBot(TOKEN)

# Connect to sqlite3 database
users_db_conn = sqlite3.connect("data/users.db", check_same_thread=False)
db_cursor = users_db_conn.cursor()

# Create table to store subscribers
db_cursor.execute('''
    CREATE TABLE IF NOT EXISTS subscribers (
        user_id INTEGER PRIMARY KEY
        )
''')
users_db_conn.commit()

# /start
@bot.message_handler(commands=["start"])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_subscribe   = telebot.types.KeyboardButton('Subscribe')
    btn_unsubscribe = telebot.types.KeyboardButton('Unsubscribe')

    markup.add(btn_subscribe, btn_unsubscribe)
    bot.reply_to(message,
                 """
                 üëã –ü—Ä–∏–≤–µ—Ç\! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\. –î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∏—Å–ø–æ–ª—å–∑—É–π *Subscribe*, a –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –Ω–µ—ë \- *Unsubscribe*\.
                 """,
                 reply_markup=markup,
                 parse_mode="MarkdownV2")

# /subscribe button processing
@bot.message_handler(func=lambda message: message.text == "Subscribe")
def subscribe(message):
    user_id = message.from_user.id

    if user_id == int(ADMIN_ID):
        # To enable admin subscription, comment this whole block of code (with if statement)
        bot.reply_to(message, "–ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üë®‚Äçüíª (—ç—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–æ–¥–µ –±–æ—Ç–∞ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏).")
        return

    db_cursor.execute('SELECT user_id FROM subscribers WHERE user_id = ?', (user_id,))
    if db_cursor.fetchone():
        bot.reply_to(message, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! üëç")
    else:
        db_cursor.execute('INSERT INTO subscribers (user_id) VALUES (?)', (user_id,))
        users_db_conn.commit()
        bot.reply_to(message, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! üéâ")

# /unsubscribe button processing
@bot.message_handler(func=lambda message: message.text == "Unsubscribe")
def unsubscribe(message):
    user_id = message.from_user.id
    db_cursor.execute('SELECT user_id FROM subscribers WHERE user_id = ?', (user_id,))
    
    # Check user subscription
    if db_cursor.fetchone():
        db_cursor.execute('DELETE FROM subscribers WHERE user_id = ?', (user_id,))
        users_db_conn.commit()
        bot.reply_to(message, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ üö´")
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üòÖ")

# /broadcast
@bot.message_handler(commands=["broadcast"])
def broadcast(message):
    # Check that command was received from admin
    if message.from_user.id == int(ADMIN_ID):
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úçÔ∏è")
        bot.register_next_step_handler(msg, send_broadcast)
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚õî")

def send_broadcast(message):
    text_to_send = "üì¢ –†–∞—Å—Å—ã–ª–∫–∞!\n" + message.text
    if text_to_send:
        db_cursor.execute('SELECT user_id FROM subscribers')
        subscribers = db_cursor.fetchall()
        for subscriber in subscribers:
            try:
                bot.send_message(subscriber[0], text_to_send)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscriber[0]} üòî: {e}")
        bot.reply_to(message, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ")
    else:
        bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º ‚ùå")


def main():
    print("Bot was started...")

    try:
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        print("\nStopping bot...")

if __name__ == "__main__":
    main()
